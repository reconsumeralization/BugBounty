[MASTER]
# Python code to execute, usually for sys.path manipulation such as pygtk.require().
init-hook='import sys; sys.path.append(".")'

# Use multiple processes to speed up Pylint.
jobs=4

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=pydantic,orjson

[MESSAGES CONTROL]
# Only show warnings with the listed confidence levels. Leave empty to show all.
confidence=

# Disable specific warnings
disable=C0111,  # missing-docstring
        C0103,  # invalid-name (for variables)
        R0903,  # too-few-public-methods
        W0511,  # fixme (todo warnings)
        R0913,  # too-many-arguments
        R0914,  # too-many-locals
        W0703,  # broad-except
        R0801,  # duplicate-code
        W0621,  # redefined-outer-name (for pytest fixtures)
        C0302,  # too-many-lines
        R0902,  # too-many-instance-attributes
        R0904,  # too-many-public-methods
        W0212,  # protected-access (for testing)
        W0221,  # arguments-differ
        W0603,  # global-statement
        W0707,  # raise-missing-from
        R0401,  # cyclic-import
        W0105   # pointless-string-statement (for type hints in comments)

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, html
output-format=colorized

# Include a brief explanation of each error when errors are displayed.
msg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}

[FORMAT]
# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module
max-module-lines=2000

# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1 tab).
indent-string='    '

[BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_,fd,fp,id,T,f

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=10

[MISCELLANEOUS]
# List of note tags to take into consideration, separated by a comma.
notes=FIXME,XXX,TODO

[VARIABLES]
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy

# List of additional names to consider as builtins
additional-builtins=

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=yes

[TYPECHECK]
# List of module names for which member attributes should not be checked
ignored-modules=numpy,tensorflow,torch,cv2,pygame,kivy

# List of classes names for which member attributes should not be checked
ignored-classes=SQLObject,optparse.Values,thread._local,_thread._local

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent,objects,DoesNotExist,id,pk,_meta

# List of decorators that create context managers from functions
contextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager

[IMPORTS]
# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

[DESIGN]
# Maximum number of arguments for function / method
max-args=10

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of return / yield for function / method body
max-returns=8

# Maximum number of branch for function / method body
max-branches=20

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=10

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught.
overgeneral-exceptions=Exception
